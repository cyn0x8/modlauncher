import flixel.util.FlxTimer;

import funkin.PlayerSettings;
import funkin.input.Controls;
import funkin.modding.base.ScriptedFlxSpriteGroup;

typedef MenuData = {
	custom_data:Null<Dynamic>,
	
	items:Array<ScriptedFlxSpriteGroup>,
	
	size_x:Int,
	size_y:Int,
	
	wrap_x:Bool,
	wrap_y:Bool,
	
	on_enter:Null<()->Void>,
	on_exit:Null<()->Void>,
	on_back:Null<()->Void>,
	
	on_update:Null<(Float)->Void>
}

class MODLAUNCHER_Menu extends ScriptedFlxSpriteGroup {
	private var controls:Null<Controls> = PlayerSettings.player1.controls;
	
	private var initialized:Bool = false;
	
	public function setup(data:Dynamic):Void {
		if (initialized) {
			return;
		}
		
		custom_data = data.custom_data;
		
		items = data.items == null ? new Array() : data.items;
		
		size_x = Std.int(data.size_x == null ? 1 : Math.max(1, data.size_x));
		size_y = Std.int(data.size_y == null ? Math.max(1, items.length) / size_x : Math.max(1, data.size_y));
		
		wrap_x = data.wrap_x == null ? true : data.wrap_x;
		wrap_y = data.wrap_y == null ? true : data.wrap_y;
		
		_on_enter = data.on_enter;
		_on_exit = data.on_exit;
		_on_back = data.on_back;
		
		_on_update = data.on_update;
		
		initialized = true;
	}
	
	public var custom_data:Null<Dynamic> = null;
	
	public var parent:Null<ScriptedFlxSpriteGroup> = null;
	public var children:Array<ScriptedFlxSpriteGroup> = new Array();
	
	public var selection:Int = 0;
	public var prev_selection:Int = 0;
	public var items:Array<ScriptedFlxSpriteGroup> = new Array();
	
	public var size_x:Int = 1;
	public var size_y:Int = 1;
	
	public var wrap_x:Bool = true;
	public var wrap_y:Bool = true;
	
	private var _on_enter:Null<()->Void> = null;
	public function on_enter():Void {
		if (_on_enter != null) {
			_on_enter();
		}
	}
	
	private var _on_exit:Null<()->Void> = null;
	public function on_exit():Void {
		if (_on_exit != null) {
			_on_exit();
		}
	}
	
	private var _on_back:Null<()->Void> = null;
	public function on_back():Void {
		if (_on_back != null) {
			_on_back();
		}
	}
	
	private var _on_update:Null<(Float)->Void> = null;
	public function on_update(elapsed:Float):Void {
		if (_on_update != null) {
			_on_update(elapsed);
		}
	}
	
	public var enabled:Bool = false;
	private var debounce_timer:Null<FlxTimer> = null;
	
	public var frozen:Bool = false;
	
	public function push_item(item:ScriptedFlxSpriteGroup):Void {
		if (items.length >= size_x * size_y) {
			return;
		}
		
		items.push(item);
		
		if (items.length == 1) {
			item.scriptSet("focused", true);
			item.scriptCall("on_focus");
		}
	}
	
	public function debounce(duration:Float = 0):Void {
		if (duration < 0) {
			return;
		}
		
		enabled = false;
		
		if (debounce_timer != null) {
			debounce_timer._timeCounter = 0;
			debounce_timer.time = Math.max(debounce_timer.time, duration);
		} else {
			debounce_timer = new FlxTimer().start(duration, function():Void {
				enabled = true;
				
				debounce_timer = null;
			});
		}
	}
	
	public override function update(elapsed:Float):Void {
		super.update(elapsed);
		
		if (frozen) {
			return;
		}
		
		controls = PlayerSettings.player1.controls;
		if (enabled && controls != null) {
			if (controls.BACK) {
				on_back();
			} else if (controls.check("accept", 2)) { // JUST_PRESSED
				if (items.length > 0) {
					items[selection].scriptCall("on_press");
				}
			} else if (controls.check("accept", -1)) { // JUST_RELEASED
				if (items.length > 0) {
					items[selection].scriptCall("on_release");
				}
			} else {
				if (items.length > 0) {
					prev_selection = selection;
					var prev_item:ScriptedFlxSpriteGroup = items[prev_selection];
					
					var directions:Array<Bool> = [
						controls.UI_LEFT_P,
						controls.UI_DOWN_P,
						controls.UI_UP_P,
						controls.UI_RIGHT_P
					];
					
					if (prev_item.scriptGet("auto_navigate")) {
						if (size_x > 1) {
							if (directions[0]) {
								selection -= 1;
							}
							
							if (directions[3]) {
								selection += 1;
							}
							
							var row = Math.floor(prev_selection / size_x) * size_x;
							if (wrap_x) {
								selection = row + (selection + size_x) % size_x;
							} else {
								selection = Math.min(Math.max(selection, row), row + size_x - 1);
							}
						}
						
						if (size_y > 1) {
							if (directions[2]) {
								selection -= size_x;
							}
							
							if (directions[1]) {
								selection += size_x;
							}
							
							var column = prev_selection % size_x;
							if (wrap_y) {
								selection = (selection + items.length) % items.length;
							} else {
								selection = Math.min(Math.max(selection, column), size_x * (size_y - 1) + column);
							}
						}
					}
					
					var direction_trigger:Bool = false;
					for (direction in directions) {
						if (direction) {
							direction_trigger = true;
							break;
						}
					}
					
					if (direction_trigger) {
						prev_item.scriptCall("on_direction", [directions]);
					}
					
					var cur_item:ScriptedFlxSpriteGroup = items[selection];
					if (prev_selection != selection) {
						prev_item.scriptSet("focused", false);
						cur_item.scriptSet("focused", true);
						
						trace("prev_item: " + Std.string(prev_item));
						trace("cur_item: " + Std.string(cur_item));
						
						prev_item.scriptCall("on_unfocus", [cur_item]);
						cur_item.scriptCall("on_focus", [prev_item]);
					}
				}
			}
		}
		
		on_update(elapsed);
		
		for (item in items) {
			item.scriptCall("on_update", [elapsed]);
		}
	}
	
	
	public override function destroy():Void {
		super.destroy();
		
		controls = null;
		
		enabled = false;
		frozen = true;
		
		custom_data = null;
		
		if (items != null) {
			while (items.length > 0) {
				items.pop().destroy();
			}
		}
		
		parent = null;
		children = null;
		
		items = null;
		
		_on_enter = null;
		_on_update = null;
		_on_exit = null;
		
		if (debounce_timer != null) {
			debounce_timer.cancel();
			debounce_timer.destroy();
			debounce_timer = null;
		}
		
		initialized = false;
	}
}