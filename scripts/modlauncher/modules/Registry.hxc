import Float;
import String;
import StringTools;

import haxe.ds.StringMap;

import thx.Types;

import funkin.modding.module.ScriptedModule;

class MODLAUNCHER_Registry extends ScriptedModule {
	public function new() {
		super("MODLAUNCHER_Registry", -2147483648);
	}
	
	public var registry:StringMap<Dynamic> = new StringMap();
	public function bind(data:Dynamic):Null<Dynamic> {
		if (!Types.isAnonymousObject(data)) {
			trace("modlauncher: data is not an object");
			return;
		}
		
		data.target = validateString(data.target);
		if (data.target == null) {
			trace("modlauncher: invalid target");
			return;
		}
		
		data.name = validateString(data.name);
		if (data.name == null) {
			trace("modlauncher: invalid name");
			return;
		}
		
		data.logoPath = validateString(data.logoPath, "modlauncher/meta/icon");
		
		data.selectSoundPath = validateString(data.selectSoundPath, "confirmMenu");
		
		data.selectDuration = Math.max(1.5, validateFloat(data.selectDuration, 1.5));
		
		if (data.onSetup == null) {
			data.onSetup = function(data:Dynamic):Void {};
		}
		
		if (data.onUpdate == null) {
			data.onUpdate = function(data:Dynamic, elapsed:Float):Void {};
		}
		
		if (data.onFocus == null) {
			data.onFocus = function(data:Dynamic):Void {};
		}
		
		if (data.onUnfocus == null) {
			data.onUnfocus = function(data:Dynamic):Void {};
		}
		
		if (data.onSelect == null) {
			data.onSelect = function(data:Dynamic):Void {};
		}
		
		if (data.onCancel == null) {
			data.onCancel = function(data:Dynamic):Void {};
		}
		
		if (data.onInit == null) {
			data.onInit = function(data:Dynamic):Void {};
		}
		
		registry.set(data.name, data);
		
		return data;
	}
	
	private function validateString(input:Null<String>, ?defaultTo:String):Null<String> {
		var valid:Bool = true;
		if (input == null || !Std.isOfType(input, String)) {
			valid = false;
		}
		
		input = StringTools.trim(StringTools.replace(input, "\n", ""));
		if (input == "") {
			valid = false;
		}
		
		if (!valid) {
			if (defaultTo == null) {
				return;
			} else {
				input = defaultTo;
			}
		}
		
		return input;
	}
	
	private function validateFloat(input:Null<Float>, ?defaultTo:Float):Null<Float> {
		var valid:Bool = true;
		if (input == null || !Std.isOfType(input, Float)) {
			valid = false;
		}
		
		if (!valid) {
			if (defaultTo == null) {
				return;
			} else {
				input = defaultTo;
			}
		}
		
		return input;
	}
}