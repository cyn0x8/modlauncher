import haxe.ds.StringMap;

import thx.Objects;

import flixel.FlxG;
import flixel.sound.FlxSound;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxTweenManager;
import flixel.tweens.misc.NumTween;

import funkin.Paths;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.play.PlayState;

typedef SoundParams = {
	path:String,
	volume:Float,
	music:Bool,
	loop:Bool,
	on_complete:Null<()->Void>
}

class MODLAUNCHER_Sound extends ScriptedModule {
	public function new() {
		super("MODLAUNCHER_Sound");
	}
	
	private var manager:Null<FlxTweenManager> = null;
	
	override public function onCreate(event:ScriptEvent):Void {
		if (!Std.isOfType(FlxG.state.subState, PlayState)) {
			initialize();
		}
	}
	
	private function check_manager():Void {
		if (manager == null) {
			manager = new FlxTweenManager();
			FlxG.signals.preStateSwitch.remove(manager.clear);
		}
	}
	
	private var initialized:Bool = false;
	private var initialize:()->Void = function():Void {
		if (initialized) {
			return;
		}
		
		if (manager != null) {
			manager.destroy();
		}
		
		check_manager();
		
		ModuleHandler.getModule("MODLAUNCHER_Reloader").scriptGet("on_reload_pre").set(ModuleHandler.modulePriorityOrder.indexOf("MODLAUNCHER_Sound"), {
			module: "MODLAUNCHER_Sound"
		});
		
		initialized = true;
	};
	
	public var sounds:StringMap<FlxSound> = new StringMap();
	
	public function set(
		tag:String,
		params:SoundParams,
		overwrite:Bool = false,
		auto_play:Bool = false,
		start_time:Float = 0,
		?end_time:Float
	):Void {
		check_manager();
		
		if (sounds.get(tag) != null) {
			if (overwrite) {
				remove(tag);
			} else {
				return;
			}
		}
		
		if (Objects.getPath(params, "path") == null || params.path == "") {
			return;
		}
		
		if (Objects.getPath(params, "volume") == null) {
			params.volume = 1;
		}
		
		if (Objects.getPath(params, "music") == null) {
			params.music = false;
		}
		
		if (Objects.getPath(params, "loop") == null) {
			params.loop = false;
		}
		
		if (Objects.getPath(params, "on_complete") == null) {
			params.on_complete = function():Void {};
		}
		
		var on_complete:()->Void = params.on_complete;
		
		var sound:FlxSound = new FlxSound();
		sound.loadEmbedded(params.music ? Paths.music(params.path) : Paths.sound(params.path), params.loop, false, function():Void {
			on_complete();
			
			remove(sound);
		});
		
		sound.persist = true;
		sound.volume = params.volume;
		
		sounds.set(tag, sound);
		
		if (auto_play) {
			play(tag, true, start_time, end_time);
		}
		
		FlxG.sound.list.add(sound);
	}
	
	public function remove(tag:String):Void {
		check_manager();
		
		var sound:FlxSound = sounds.get(tag);
		if (sound != null) {
			manager.cancelTweensOf(sound);
			
			sound.stop();
			sound.destroy();
			
			FlxG.sound.list.remove(sound);
			
			sounds.remove(tag);
		}
		
		var tween:NumTween = pitch_tweens.get(tag);
		if (tween != null) {
			tween.cancel();
			tween.destroy();
			pitch_tweens.remove(tag);
		}
	}
	
	public function play(tag:String, force:Bool = false, start_time:Float = 0, ?end_time:Float):Void {
		check_manager();
		
		var sound:FlxSound = sounds.get(tag);
		if (sound != null) {
			sound.play(force, start_time, end_time);
		}
	}
	
	public function resume(tag:String):Void {
		check_manager();
		
		var sound:FlxSound = sounds.get(tag);
		if (sound != null) {
			sound.resume();
		}
	}
	
	public function pause(tag:String):Void {
		check_manager();
		
		var sound:FlxSound = sounds.get(tag);
		if (sound != null) {
			sound.pause();
		}
	}
	
	public function fade_out(tag:String, duration:Float = 1, to:Float = 0, ?on_complete:()->Void):Void {
		check_manager();
		
		var sound:FlxSound = sounds.get(tag);
		if (sound != null) {
			manager.cancelTweensOf(sound, ["volume"]);
			manager.tween(sound, {volume: to}, duration, {onComplete: on_complete});
		}
	}
	
	public function fade_in(tag:String, duration:Float = 1, from:Null<Float> = null, to:Float = 1, ?on_complete:()->Void):Void {
		check_manager();
		
		var sound:FlxSound = sounds.get(tag);
		if (sound != null) {
			manager.cancelTweensOf(sound, ["volume"]);
			
			if (from == null) {
				from = sound.volume;
			} else {
				sound.volume = from;
			}
			
			manager.tween(sound, {volume: to}, duration, {onComplete: on_complete});
		}
	}
	
	private var pitch_tweens:StringMap<NumTween> = new StringMap();
	public function pitch_shift(tag:String, duration:Float = 1, from:Float = 0, to:Float = 1, ?on_complete:()->Void):Void {
		check_manager();
		
		var sound:FlxSound = sounds.get(tag);
		if (sound != null) {
			var hscript_being_weird_on_complete:()->Void = on_complete;
			if (hscript_being_weird_on_complete == null) {
				hscript_being_weird_on_complete = function():Void {};
			}
			
			var hscript_being_weird_tag:String = tag;
			pitch_tweens.set(tag, manager.num(from, to, duration, {onComplete: function():Void {
				pitch_tweens.remove(hscript_being_weird_tag);
				
				hscript_being_weird_on_complete();
			}}, function(v:Float):Void {
				sound.pitch = v;
			}));
		}
	}
	
	public function stop_all():Void {
		check_manager();
		
		for (tag in sounds.keys()) {
			remove(tag);
		}
	}
	
	override public function onUpdate(event:UpdateScriptEvent):Void {
		if (initialized) {
			manager.update(event.elapsed);
		}
	}
	
	override public function onDestroy(event:ScriptEvent):Void {
		stop_all();
		
		if (manager != null) {
			manager.destroy();
			manager = null;
		}
		
		initialized = false;
	}
}